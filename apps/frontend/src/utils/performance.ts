/**
 * ÁßªÂä®Á´ØÊÄßËÉΩÁõëÊéßÂ∑•ÂÖ∑
 * ÂÆûÊó∂ÁõëÊéßÈ°µÈù¢ÊÄßËÉΩÊåáÊ†áÔºå‰ºòÂåñÁî®Êà∑‰ΩìÈ™å
 */

interface PerformanceMetric {
  name: string
  value: number
  rating: 'good' | 'needs-improvement' | 'poor'
}

interface PageLoadMetrics {
  // Ê†∏ÂøÉWebÊåáÊ†á
  FCP?: PerformanceMetric  // First Contentful Paint
  LCP?: PerformanceMetric  // Largest Contentful Paint
  FID?: PerformanceMetric  // First Input Delay
  CLS?: PerformanceMetric  // Cumulative Layout Shift
  TTFB?: PerformanceMetric // Time to First Byte

  // Ëá™ÂÆö‰πâÊåáÊ†á
  pageLoadTime?: number
  domContentLoaded?: number
  resourcesLoaded?: number
}

class PerformanceMonitor {
  private metrics: PageLoadMetrics = {}

  /**
   * ÂàùÂßãÂåñÊÄßËÉΩÁõëÊéß
   */
  init(): void {
    if (typeof window === 'undefined' || !window.performance) {
      console.warn('Performance API‰∏çÂèØÁî®')
      return
    }

    // ÁõëÂê¨È°µÈù¢Âä†ËΩΩÂÆåÊàê
    if (document.readyState === 'complete') {
      this.collectMetrics()
    } else {
      window.addEventListener('load', () => {
        this.collectMetrics()
      })
    }

    // ‰ΩøÁî® PerformanceObserver ÁõëÊéß Web Vitals
    this.observeWebVitals()
  }

  /**
   * Êî∂ÈõÜÈ°µÈù¢Âä†ËΩΩÊÄßËÉΩÊåáÊ†á
   */
  private collectMetrics(): void {
    const perfData = window.performance.timing
    const now = Date.now()

    // È°µÈù¢Âä†ËΩΩÊó∂Èó¥
    this.metrics.pageLoadTime = perfData.loadEventEnd - perfData.navigationStart

    // DOMÂÜÖÂÆπÂä†ËΩΩÊó∂Èó¥
    this.metrics.domContentLoaded = perfData.domContentLoadedEventEnd - perfData.navigationStart

    // ËµÑÊ∫êÂä†ËΩΩÊó∂Èó¥
    this.metrics.resourcesLoaded = perfData.loadEventEnd - perfData.domContentLoadedEventEnd

    // TTFB - È¶ñÂ≠óËäÇÊó∂Èó¥
    const ttfb = perfData.responseStart - perfData.requestStart
    this.metrics.TTFB = {
      name: 'TTFB',
      value: ttfb,
      rating: this.rateTTFB(ttfb)
    }

    console.log('[ÊÄßËÉΩÁõëÊéß] È°µÈù¢Âä†ËΩΩÊåáÊ†á:', this.metrics)
  }

  /**
   * ‰ΩøÁî® PerformanceObserver ÁõëÊéß Web Vitals
   */
  private observeWebVitals(): void {
    try {
      // ÁõëÊéß LCP (Largest Contentful Paint)
      const lcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries()
        const lastEntry = entries[entries.length - 1] as any

        this.metrics.LCP = {
          name: 'LCP',
          value: lastEntry.renderTime || lastEntry.loadTime,
          rating: this.rateLCP(lastEntry.renderTime || lastEntry.loadTime)
        }
      })
      lcpObserver.observe({ type: 'largest-contentful-paint', buffered: true })

      // ÁõëÊéß FID (First Input Delay)
      const fidObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries() as any[]
        entries.forEach((entry) => {
          this.metrics.FID = {
            name: 'FID',
            value: entry.processingStart - entry.startTime,
            rating: this.rateFID(entry.processingStart - entry.startTime)
          }
        })
      })
      fidObserver.observe({ type: 'first-input', buffered: true })

      // ÁõëÊéß CLS (Cumulative Layout Shift)
      let clsValue = 0
      const clsObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries() as any[]
        entries.forEach((entry) => {
          if (!entry.hadRecentInput) {
            clsValue += entry.value
          }
        })

        this.metrics.CLS = {
          name: 'CLS',
          value: clsValue,
          rating: this.rateCLS(clsValue)
        }
      })
      clsObserver.observe({ type: 'layout-shift', buffered: true })
    } catch (error) {
      console.warn('[ÊÄßËÉΩÁõëÊéß] PerformanceObserver‰∏çÂèØÁî®:', error)
    }
  }

  /**
   * ËØÑ‰º∞ LCP (Largest Contentful Paint)
   * Good: < 2.5s, Needs Improvement: 2.5-4s, Poor: > 4s
   */
  private rateLCP(value: number): 'good' | 'needs-improvement' | 'poor' {
    if (value < 2500) return 'good'
    if (value < 4000) return 'needs-improvement'
    return 'poor'
  }

  /**
   * ËØÑ‰º∞ FID (First Input Delay)
   * Good: < 100ms, Needs Improvement: 100-300ms, Poor: > 300ms
   */
  private rateFID(value: number): 'good' | 'needs-improvement' | 'poor' {
    if (value < 100) return 'good'
    if (value < 300) return 'needs-improvement'
    return 'poor'
  }

  /**
   * ËØÑ‰º∞ CLS (Cumulative Layout Shift)
   * Good: < 0.1, Needs Improvement: 0.1-0.25, Poor: > 0.25
   */
  private rateCLS(value: number): 'good' | 'needs-improvement' | 'poor' {
    if (value < 0.1) return 'good'
    if (value < 0.25) return 'needs-improvement'
    return 'poor'
  }

  /**
   * ËØÑ‰º∞ TTFB (Time to First Byte)
   * Good: < 800ms, Needs Improvement: 800-1800ms, Poor: > 1800ms
   */
  private rateTTFB(value: number): 'good' | 'needs-improvement' | 'poor' {
    if (value < 800) return 'good'
    if (value < 1800) return 'needs-improvement'
    return 'poor'
  }

  /**
   * Ëé∑ÂèñÊâÄÊúâÊÄßËÉΩÊåáÊ†á
   */
  getMetrics(): PageLoadMetrics {
    return this.metrics
  }

  /**
   * ÊâìÂç∞ÊÄßËÉΩÊä•Âëä
   */
  printReport(): void {
    console.group('üìä ÁßªÂä®Á´ØÊÄßËÉΩÊä•Âëä')

    if (this.metrics.LCP) {
      console.log(`üéØ LCP (ÊúÄÂ§ßÂÜÖÂÆπÁªòÂà∂): ${this.metrics.LCP.value.toFixed(0)}ms - ${this.metrics.LCP.rating}`)
    }

    if (this.metrics.FID) {
      console.log(`‚ö° FID (È¶ñÊ¨°ËæìÂÖ•Âª∂Ëøü): ${this.metrics.FID.value.toFixed(0)}ms - ${this.metrics.FID.rating}`)
    }

    if (this.metrics.CLS) {
      console.log(`üìê CLS (Á¥ØÁßØÂ∏ÉÂ±ÄÂÅèÁßª): ${this.metrics.CLS.value.toFixed(3)} - ${this.metrics.CLS.rating}`)
    }

    if (this.metrics.TTFB) {
      console.log(`üöÄ TTFB (È¶ñÂ≠óËäÇÊó∂Èó¥): ${this.metrics.TTFB.value.toFixed(0)}ms - ${this.metrics.TTFB.rating}`)
    }

    if (this.metrics.pageLoadTime) {
      console.log(`‚è±Ô∏è È°µÈù¢Âä†ËΩΩÊó∂Èó¥: ${this.metrics.pageLoadTime.toFixed(0)}ms`)
    }

    console.groupEnd()
  }

  /**
   * ÊµãÈáèËá™ÂÆö‰πâÊìç‰ΩúÁöÑÊâßË°åÊó∂Èó¥
   */
  measure(name: string, fn: () => void | Promise<void>): void {
    const start = performance.now()

    const result = fn()

    if (result instanceof Promise) {
      result.then(() => {
        const duration = performance.now() - start
        console.log(`‚è±Ô∏è [${name}] ÊâßË°åÊó∂Èó¥: ${duration.toFixed(2)}ms`)
      })
    } else {
      const duration = performance.now() - start
      console.log(`‚è±Ô∏è [${name}] ÊâßË°åÊó∂Èó¥: ${duration.toFixed(2)}ms`)
    }
  }
}

// ÂàõÂª∫ÂÖ®Â±ÄÊÄßËÉΩÁõëÊéßÂÆû‰æã
export const performanceMonitor = new PerformanceMonitor()

/**
 * Âú®ÂºÄÂèëÁéØÂ¢É‰∏≠Ëá™Âä®ÂàùÂßãÂåñÊÄßËÉΩÁõëÊéß
 */
if (import.meta.env.DEV) {
  performanceMonitor.init()

  // 5ÁßíÂêéÊâìÂç∞ÊÄßËÉΩÊä•Âëä
  setTimeout(() => {
    performanceMonitor.printReport()
  }, 5000)
}

export default performanceMonitor